{
  "users": {
    "tableSchema": "CREATE TABLE users (id varchar(42) PRIMARY KEY,display_name text NOT NULL DEFAULT 'Expresser',avatar_url text NOT NULL,bio text);",
    "insertionScript": "INSERT INTO users(id, display_name, avatar_url) VALUES('palpriyanshu','Priyanshu','avatar_url')"
  },
  "stories": {
    "tableSchema": "CREATE TABLE stories (id integer PRIMARY KEY AUTOINCREMENT,written_by varchar(42) NOT NULL,state varchar(9) NOT NULL,title text NOT NULL,content text,cover_image text,last_modified timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,  FOREIGN KEY (written_by) REFERENCES users(id),  CHECK (state IN ('drafted','published')));",
    "insertionScript": "INSERT INTO stories(written_by, state, title, content, last_modified) VALUES  ('palpriyanshu', 'published', 'sampleTitle','[{\"type\":\"paragraph\",\"data\":{\"text\":\"You might be wondering where the REST attribute comes in. REST stands for REpresentational State Transfer. This means there is no state between the client and the server. There are no webpages served to be parsed, just data. And this gives you all the freedom you need. All you need to do is write some logic on a specific URL that connects to a database, uses itâ€™s logic to process the data and return it in JSON format. Your client can now be an Android app made in Java, or a Windows desktop app made in C# or an Arduino project.\"}},{\"type\":\"paragraph\",\"data\":{\"text\":\"The data returned is an array of string. This is raw data.\"}},{\"type\":\"paragraph\",\"data\":{\"text\":\"How it all fits as a REST based API.\"}},{\"type\":\"paragraph\",\"data\":{\"text\":\"This is the whole point of using REST, it makes the connection stateless therefore any client that utilizes the HTTP protocol can access this data. Now you can iterate through the data and display it anywhere you want.\"}}]','2020-07-23 09:24:18')"
  }
}
